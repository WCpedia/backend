# name: Deploy

# on:
#   push:
#     branches: [dev]

# jobs:
#   Deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Dynamically set MY_DATE environment variable
#         run: echo "MY_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Setup node.js
#         uses: actions/setup-node@v3.8.1
#         with:
#           node-version: 18.18.2

#       - name: Install Backend-Server
#         run: npm ci

#       - name: Compile Backend-Server
#         run: npm run build

#       - name: Setting .env
#         run: |
#           echo "HOST=${{ secrets.HOST }}" >> .env
#           echo "PORT=${{ secrets.PORT }}" >> .env

#           echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

#           echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
#           echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
#           echo "S3_BUCKET_REGION=${{ secrets.S3_BUCKET_REGION }}" >> .env
#           echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env

#           echo "JWT_ACCESS_TOKEN_SECRET=${{ secrets.JWT_ACCESS_TOKEN_SECRET }}" >> .env
#           echo "JWT_REFRESH_TOKEN_SECRET=${{ secrets.JWT_REFRESH_TOKEN_SECRET }}" >> .env
#           echo "JWT_ACCESS_TOKEN_TTL=${{ secrets.JWT_ACCESS_TOKEN_TTL }}" >> .env
#           echo "JWT_REFRESH_TOKEN_TTL=${{ secrets.JWT_REFRESH_TOKEN_TTL }}" >> .env

#           cat .env

#       #  "node_modules/*" "coverage/*" "src/*" "test/*" "README.md" "*.git*" "/common" "tsconfig.json" "tsconfig.build.json" "nest-cli.json" 파일 제외 후 레퍼지토리 압축
#       - name: Make a zip file
#         run: zip -r ./$GITHUB_SHA.zip . -x "node_modules/*" "coverage/*" "src/*" "test/*" "README.md" "*.git*" "common/*" "tsconfig.json" "tsconfig.build.json" "nest-cli.json"
#         shell: bash

#       # AWS 자격 증명 수행
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       # zip 파일 S3 업로드
#       - name: Upload to S3
#         run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./$GITHUB_SHA.zip s3://${{secrets.AWS_S3_BUCKET_NAME}}/${{secrets.PROJECT_NAME}}/${{ env.MY_DATE }}.zip

#       # 코드 배포
#       - name: Code Deploy
#         run: aws deploy create-deployment
#           --application-name ${{secrets.AWS_CODEDEPLOY_APPLICATION_NAME}}
#           --deployment-config-name CodeDeployDefault.AllAtOnce
#           --deployment-group-name ${{secrets.AWS_CODEDEPLOY_DEPLOYMENT_GROUP_NAME}}
#           --s3-location bucket=${{secrets.AWS_S3_BUCKET_NAME}},bundleType=zip,key=${{secrets.PROJECT_NAME}}/${{ env.MY_DATE }}.zip
