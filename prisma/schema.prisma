enum Emoji {
  LIKE
  THUMBS_UP
}

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
  APPLE
}

enum Role {
  ADMIN
  USER
}

enum PlaceImageType {
  KAKAO
  LOCAL
}

enum VisitTime {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

enum ReportMainType {
  USER
  REVIEW
}

enum UserReportSubType {
  SPAM
  NICKNAME
  DESCRIPTION
  PROFILE_IMAGE
  ETC
}

enum ReviewReportSubType {
  FALSE_INFO
  OFFENSIVE_REVIEW
  IRRELEVANT // 장소와 무관한 리뷰
  ETC
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  role             Role      @default(USER)
  nickname         String    @unique
  description      String?   @default("")
  profileImageKey  String?
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt        DateTime? @db.Timestamp(6)
  totalReviewCount Int       @default(0)
  ratingAverage    Float     @default(0)
  isBanned         Boolean   @default(false) // 제제 상태 추가

  authentication          Authentication?
  reviews                 PlaceReview[]
  helpfulReviews          HelpfulReview[]
  userFeedbacks           UserFeedback[]
  userSubmittedToiletInfo UserSubmittedToiletInfo[] @relation("User")
  checkedToiletInfos      UserSubmittedToiletInfo[] @relation("Checker")
  placeReviewSnapshots    PlaceReviewSnapshot[]
  userProfileSnapshots    UserProfileSnapshot[]
  reportsReceived         Report[]                  @relation("TargetUser")
  reportsMade             Report[]                  @relation("Reporter")
  bans                    UserBan[]                 @relation("User")
  adminBans               UserBan[]                 @relation("Admin")
  blockedUsers            Block[]                   @relation("Blocker")
  blockedBy               Block[]                   @relation("BlockedUser")
  searches                Search[]
}

model Block {
  id            Int      @id @default(autoincrement())
  userId        Int
  blockedUserId Int
  createdAt     DateTime @default(now())
  blocker       User     @relation("Blocker", fields: [userId], references: [id], onDelete: Cascade)
  blockedUser   User     @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedUserId])
}

model UserBan {
  id        Int       @id @default(autoincrement())
  userId    Int
  reason    String
  bannedBy  Int
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  user  User @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  admin User @relation("Admin", fields: [bannedBy], references: [id], onDelete: Cascade)
}

model UserProfileSnapshot {
  id              Int       @id @default(autoincrement())
  userId          Int
  nickname        String
  description     String?
  profileImageKey String?
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?
  user            User      @relation(fields: [userId], references: [id])
}

model UserFeedback {
  id          Int      @id @default(autoincrement())
  userId      Int
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Authentication {
  id        Int       @id @default(autoincrement())
  userId    Int?      @unique
  email     String
  provider  Provider
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, provider])
}

model Place {
  id                       Int                       @id @default(autoincrement())
  kakaoId                  String                    @unique
  name                     String
  placeCategoryId          Int
  regionId                 Int
  detailAddress            String
  telephone                String?
  facilityRating           Float?
  accessibilityRating      Float?
  cleanlinessRating        Float?
  reviewCount              Int                       @default(0)
  kakaoUrl                 String?
  x                        Float
  y                        Float
  isInitial                Boolean                   @default(false)
  region                   Region?                   @relation(fields: [regionId], references: [id])
  placeCategory            PlaceCategory             @relation(fields: [placeCategoryId], references: [id])
  images                   PlaceImage[]
  reviews                  PlaceReview[]
  publicToiletInfo         PublicToiletInfo?
  userSubmittedToiletInfos UserSubmittedToiletInfo[]
  menuInfo                 MenuInfo[]
  PlaceReviewSnapshot      PlaceReviewSnapshot[]
  toiletInfo               ToiletInfo[]
}

model PlaceImage {
  id      Int            @id @default(autoincrement())
  type    PlaceImageType @default(KAKAO)
  placeId Int
  url     String
  place   Place          @relation(fields: [placeId], references: [id])
}

model MenuInfo {
  id      Int     @id @default(autoincrement())
  placeId Int
  menu    String
  price   String?
  place   Place   @relation(fields: [placeId], references: [id])
}

model PlaceCategory {
  id              Int       @id @default(autoincrement())
  fullCategoryIds String    @unique
  lastDepth       Int
  depth1Id        Int
  depth2Id        Int?
  depth3Id        Int?
  depth4Id        Int?
  depth5Id        Int?
  places          Place[]
  depth1          Category  @relation("Depth1", fields: [depth1Id], references: [id])
  depth2          Category? @relation("Depth2", fields: [depth2Id], references: [id])
  depth3          Category? @relation("Depth3", fields: [depth3Id], references: [id])
  depth4          Category? @relation("Depth4", fields: [depth4Id], references: [id])
  depth5          Category? @relation("Depth5", fields: [depth5Id], references: [id])
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  depth1 PlaceCategory[] @relation("Depth1")
  depth2 PlaceCategory[] @relation("Depth2")
  depth3 PlaceCategory[] @relation("Depth3")
  depth4 PlaceCategory[] @relation("Depth4")
  depth5 PlaceCategory[] @relation("Depth5")
}

model Region {
  id                     Int     @id @default(autoincrement())
  administrativeDistrict String
  district               String?
  place                  Place[]

  @@unique([administrativeDistrict, district])
}

model PublicToiletInfo {
  id                      Int      @id @default(autoincrement())
  placeId                 Int      @unique
  isUnisex                Boolean? // 남여공용 여부
  maleToiletCount         Int? // 남성용 좌변기 개수
  maleUrinalCount         Int? // 남성용 소변기 개수
  femaleToiletCount       Int? // 여성용 좌변기 개수
  hasHandDryer            Boolean? // 핸드 드라이어 유무
  hasPowderRoom           Boolean? // 파우더룸 유무
  hasBabyChangingFacility Boolean? // 기저귀 교환대 유무
  hasSanitizer            Boolean? // 손 소독제 유무
  indoor                  Boolean? // 실내 위치 여부
  accessible              Boolean? // 장애인 접근성 여부
  hasFeminineProductsBin  Boolean? // 여성 위생용품 수거함 유무
  hasChildUrinal          Boolean? // 어린이 소변기 유무
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  place                   Place    @relation(fields: [placeId], references: [id])
}

enum ToiletType {
  NONE
  MALE
  FEMALE
  UNISEX
  SINGLE
}

model ToiletInfo {
  id        Int           @id @default(autoincrement())
  placeId   Int
  type      ToiletType // 화장실 유형 (남성용, 여성용, 공용, 1인용 등)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  place     Place         @relation(fields: [placeId], references: [id])
  details   ToiletDetail?
}

enum LocationType {
  INDOOR //가게 내부
  BUILDING_INSIDE //상가 건물 내부
  OUTDOOR //야외
}

enum LockType {
  NONE // 잠금장치 없음
  DOOR_LOCK // 도어락
  KEY // 열쇠
}

model ToiletDetail {
  id                      Int           @id @default(autoincrement())
  toiletInfoId            Int           @unique
  toiletCount             Int? // 좌변기 개수
  urinalCount             Int? // 소변기 개수
  isAccessibleToilet      Boolean? // 장애인 화장실 여부
  hasHandDryer            Boolean? // 핸드 드라이어 유무
  hasPowderRoom           Boolean? // 파우더룸 유무
  hasBabyChangingFacility Boolean? // 기저귀 교환대 유무
  hasSanitizer            Boolean? // 손 소독제 유무
  accessible              Boolean? // 장애인 접근성 여부
  hasFeminineProductsBin  Boolean? // 여성 위생용품 수거함 유무
  hasFeminineProducts     Boolean? // 여성 위생용품 구비 여부
  hasChildToilet          Boolean? // 어린이 변기 유무
  hasBabyChair            Boolean? // 영유아보호의자 유무
  hasEmergencyBell        Boolean? // 비상벨 유무
  hasSupportBars          Boolean? // 지지대 유무
  lockType                LockType? // 잠금장치 유형
  locationType            LocationType?
  locationDescription     String? // 위치 설명
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  toiletInfo              ToiletInfo    @relation(fields: [toiletInfoId], references: [id], onDelete: Cascade)

  // maleToiletCount         Int? // 남성용 좌변기 개수
  // maleUrinalCount         Int? // 남성용 소변기 개수
  // femaleToiletCount       Int? // 여성용 좌변기 개수
}

// 유저가 제보한 화장실 정보 
model UserSubmittedToiletInfo {
  id                      Int       @id @default(autoincrement())
  placeId                 Int
  userId                  Int
  isUnisex                Boolean? // 남여공용 여부
  maleToiletCount         Int? // 남성용 좌변기 개수
  maleUrinalCount         Int? // 남성용 소변기 개수
  femaleToiletCount       Int? // 여성용 좌변기 개수
  hasHandDryer            Boolean? // 핸드 드라이어 유무
  hasPowderRoom           Boolean? // 파우더룸 유무
  hasBabyChangingFacility Boolean? // 기저귀 교환대 유무
  hasSanitizer            Boolean? // 손 소독제 유무
  indoor                  Boolean? // 실내 위치 여부
  accessible              Boolean? // 장애인 접근성 여부
  hasFeminineProductsBin  Boolean? // 여성 위생용품 수거함 유무
  hasChildUrinal          Boolean? // 어린이 소변기 유무
  createdAt               DateTime  @default(now())
  isChecked               Boolean   @default(false)
  checkedBy               Int?
  checkedAt               DateTime?

  place   Place                      @relation(fields: [placeId], references: [id])
  user    User                       @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  checker User?                      @relation("Checker", fields: [checkedBy], references: [id], onDelete: SetNull)
  images  UserSubmittedToiletImage[]
}

model UserSubmittedToiletImage {
  id                      Int                     @id @default(autoincrement())
  toiletInfoId            Int
  key                     String // 이미지 URL
  createdAt               DateTime                @default(now())
  userSubmittedToiletInfo UserSubmittedToiletInfo @relation(fields: [toiletInfoId], references: [id], onDelete: Cascade)
}

model PlaceReview {
  id                  Int                   @id @default(autoincrement())
  placeId             Int
  userId              Int
  accessibilityRating Int // 접근성 
  facilityRating      Int // 시설 
  cleanlinessRating   Int // 청결도 
  visitTime           VisitTime? // 방문 시간대
  description         String?               @default("") //임시
  helpfulCount        Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place               Place                 @relation(fields: [placeId], references: [id])
  helpfulReviews      HelpfulReview[]
  images              ReviewImage[]
  PlaceReviewSnapshot PlaceReviewSnapshot[]
  Report              Report[]
}

model PlaceReviewSnapshot {
  id                  Int         @id @default(autoincrement())
  placeId             Int
  placeReviewId       Int
  userId              Int
  accessibilityRating Int? // 접근성 
  facilityRating      Int? // 시설 
  cleanlinessRating   Int? // 청결도 
  visitTime           VisitTime? // 방문 시간대
  description         String? // 설명
  createdAt           DateTime    @default(now())
  deletedAt           DateTime?
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  place               Place       @relation(fields: [placeId], references: [id])
  placeReview         PlaceReview @relation(fields: [placeReviewId], references: [id])
}

model ReviewImage {
  id        Int         @id @default(autoincrement())
  reviewId  Int
  key       String
  createdAt DateTime    @default(now())
  deletedAt DateTime?
  review    PlaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([id, reviewId])
}

model HelpfulReview {
  id          Int         @id @default(autoincrement())
  reviewId    Int
  userId      Int
  placeReview PlaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

model Report {
  id                Int                  @id @default(autoincrement())
  mainType          ReportMainType
  userReportSubType UserReportSubType? // 사용자 관련 소분류
  reviewSubType     ReviewReportSubType? // 리뷰 관련 소분류
  reporterId        Int
  targetUserId      Int
  targetReviewId    Int?
  description       String?
  createdAt         DateTime             @default(now())
  deletedAt         DateTime?
  isResolved        Boolean              @default(false)
  reporter          User                 @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  targetUser        User                 @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetReview      PlaceReview?         @relation(fields: [targetReviewId], references: [id], onDelete: SetNull)
}

model SearchKeyword {
  id         Int      @id @default(autoincrement())
  keyword    String   @unique
  totalCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  searches Search[]
}

model Search {
  id        Int      @id @default(autoincrement())
  keywordId Int
  userId    Int?
  createdAt DateTime @default(now())

  keyword SearchKeyword @relation(fields: [keywordId], references: [id])
  user    User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
