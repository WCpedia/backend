// enum LocationType {
//   Inside
//   Outside
// }

// enum Emoji {
//   Like
//   Helpful
//   Smile
//   Sad
// }

// enum ReportType {
//   User
//   ToiletReview
// }

// enum Reason {
//   InappropriateNickname
//   InappropriateContent
//   ContainsProfanity
//   Harassment
//   Spam
//   Other
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  role          Role      @default(USER)
  nickname      String    @unique
  description   String?
  profileUrlKey String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt     DateTime? @db.Timestamp(6)

  authentication Authentication?
  // toiletReviews      ToiletReviews[]
  // toiletReviewEmoji ToiletReviewEmoji[]
  // reportedReports    Reports[]           @relation("ReportedUser")
  // targetReports      Reports[]           @relation("TargetUser")
}

model Authentication {
  id        Int       @id @default(autoincrement())
  userId    Int?      @unique
  email     String
  provider  Provider
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, provider])
}

model Place {
  id              Int     @id @default(autoincrement())
  kakaoId         String  @unique
  name            String
  placeCategoryId Int
  regionId        Int
  detailAddress   String
  telephone       String?
  stars           String?
  kakaoUrl        String?
  x               Float
  y               Float

  region        Region?       @relation(fields: [regionId], references: [id])
  placeCategory PlaceCategory @relation(fields: [placeCategoryId], references: [id])
  placeImage   PlaceImage[]
}

model PlaceImage {
  id      Int    @id @default(autoincrement())
  type    PlaceImageType @default(KAKAO)
  placeId Int
  url     String

  place Place @relation(fields: [placeId], references: [id])
}

model PlaceCategory {
  id        Int  @id @default(autoincrement())
  fullCategoryIds String @unique
  lastDepth Int
  depth1Id  Int
  depth2Id  Int?
  depth3Id  Int?
  depth4Id  Int?
  depth5Id  Int?

  place  Place[]
  depth1 Category  @relation("Depth1", fields: [depth1Id], references: [id])
  depth2 Category? @relation("Depth2", fields: [depth2Id], references: [id])
  depth3 Category? @relation("Depth3", fields: [depth3Id], references: [id])
  depth4 Category? @relation("Depth4", fields: [depth4Id], references: [id])
  depth5 Category? @relation("Depth5", fields: [depth5Id], references: [id])

  
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  depth1 PlaceCategory[] @relation("Depth1")
  depth2 PlaceCategory[] @relation("Depth2")
  depth3 PlaceCategory[] @relation("Depth3")
  depth4 PlaceCategory[] @relation("Depth4")
  depth5 PlaceCategory[] @relation("Depth5")
}

model Region {
  id                     Int     @id @default(autoincrement())
  administrativeDistrict String
  district               String?
  place                  Place[]

  @@unique([administrativeDistrict, district])
}

// model ToiletReviews {
//   id                  Int                 @id @default(autoincrement())
//   placeId            Int
//   userId             Int
//   stars               Float
//   createdAt          DateTime            @default(now())
//   updatedAt          DateTime            @updatedAt
//   isUnisex           Boolean?
//   description         String?
//   visitedAt          DateTime?
//   location            LocationType?
//   likeCount          Int                 @default(0)
//   helpfulCount       Int                 @default(0)
//   smileCount         Int                 @default(0)
//   sadCount           Int                 @default(0)
//   user                Users               @relation(fields: [userId], references: [id], onDelete: Cascade)
//   place               Places              @relation(fields: [placeId], references: [id])
//   toiletReviewEmoji ToiletReviewEmoji[]
//   report              Reports[]

//   @@unique([placeId, userId])
// }

// model ToiletReviewEmoji {
//   id               Int           @id @default(autoincrement())
//   toiletReviewId Int
//   userId          Int
//   emoji            Emoji
//   toiletReviews   ToiletReviews @relation(fields: [toiletReviewId], references: [id], onDelete: Cascade)
//   user             Users         @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([toiletReviewId, userId])
// }

// model Reports {
//   id                      Int            @id @default(autoincrement())
//   reportType             ReportType
//   reporterId             Int
//   targetUserId          Int?
//   targetToiletReviewId Int?
//   reason                  Reason
//   description             String?
//   reporter                Users          @relation("ReportedUser", fields: [reporterId], references: [id])
//   targetUser             Users?         @relation("TargetUser", fields: [targetUserId], references: [id])
//   targetToiletReview    ToiletReviews? @relation(fields: [targetToiletReviewId], references: [id])

//   @@unique([reporterId, targetUserId])
//   @@unique([reporterId, targetToiletReviewId])
// }

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
}

enum Role {
  ADMIN
  USER
}

enum PlaceImageType {
  KAKAO
  LOCAL
}