enum Emoji {
  LIKE
  THUMBS_UP
}

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
  APPLE
}

enum Role {
  ADMIN
  USER
}

enum PlaceImageType {
  KAKAO
  LOCAL
}

enum VisitTime {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                       @id @default(autoincrement())
  role                    Role                      @default(USER)
  nickname                String                    @unique
  description             String?
  profileImageKey         String?
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt               DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt               DateTime?                 @db.Timestamp(6)
  totalReviewCount        Int                       @default(0)
  ratingAverage           Float                     @default(0)
  authentication          Authentication?
  reviews                 PlaceReview[]
  helpfulReviews          HelpfulReview[]
  userSubmittedToiletInfo UserSubmittedToiletInfo[]
}

model Authentication {
  id        Int       @id @default(autoincrement())
  userId    Int?      @unique
  email     String
  provider  Provider
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, provider])
}

model Place {
  id                       Int                       @id @default(autoincrement())
  kakaoId                  String                    @unique
  name                     String
  placeCategoryId          Int
  regionId                 Int
  detailAddress            String
  telephone                String?
  facilityRating           Float?
  accessibilityRating      Float?
  cleanlinessRating        Float?
  reviewCount              Int                       @default(0)
  kakaoUrl                 String?
  x                        Float
  y                        Float
  isInitial                Boolean                   @default(false)
  region                   Region?                   @relation(fields: [regionId], references: [id])
  placeCategory            PlaceCategory             @relation(fields: [placeCategoryId], references: [id])
  images                   PlaceImage[]
  reviews                  PlaceReview[]
  publicToiletInfo         PublicToiletInfo?
  userSubmittedToiletInfos UserSubmittedToiletInfo[]
  menuInfo                 MenuInfo[]
}

model PlaceImage {
  id      Int            @id @default(autoincrement())
  type    PlaceImageType @default(KAKAO)
  placeId Int
  url     String
  place   Place          @relation(fields: [placeId], references: [id])
}

model MenuInfo {
  id      Int     @id @default(autoincrement())
  placeId Int
  menu    String
  price   String?
  place   Place   @relation(fields: [placeId], references: [id])
}

model PlaceCategory {
  id              Int       @id @default(autoincrement())
  fullCategoryIds String    @unique
  lastDepth       Int
  depth1Id        Int
  depth2Id        Int?
  depth3Id        Int?
  depth4Id        Int?
  depth5Id        Int?
  places          Place[]
  depth1          Category  @relation("Depth1", fields: [depth1Id], references: [id])
  depth2          Category? @relation("Depth2", fields: [depth2Id], references: [id])
  depth3          Category? @relation("Depth3", fields: [depth3Id], references: [id])
  depth4          Category? @relation("Depth4", fields: [depth4Id], references: [id])
  depth5          Category? @relation("Depth5", fields: [depth5Id], references: [id])
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  depth1 PlaceCategory[] @relation("Depth1")
  depth2 PlaceCategory[] @relation("Depth2")
  depth3 PlaceCategory[] @relation("Depth3")
  depth4 PlaceCategory[] @relation("Depth4")
  depth5 PlaceCategory[] @relation("Depth5")
}

model Region {
  id                     Int     @id @default(autoincrement())
  administrativeDistrict String
  district               String?
  place                  Place[]

  @@unique([administrativeDistrict, district])
}

model PublicToiletInfo {
  id                      Int      @id @default(autoincrement())
  placeId                 Int      @unique
  isUnisex                Boolean? // 남여공용 여부
  maleToiletCount         Int? // 남성용 좌변기 개수
  maleUrinalCount         Int? // 남성용 소변기 개수
  femaleToiletCount       Int? // 여성용 좌변기 개수
  hasHandDryer            Boolean? // 핸드 드라이어 유무
  hasPowderRoom           Boolean? // 파우더룸 유무
  hasBabyChangingFacility Boolean? // 기저귀 교환대 유무
  hasSanitizer            Boolean? // 손 소독제 유무
  indoor                  Boolean? // 실내 위치 여부
  accessible              Boolean? // 장애인 접근성 여부
  hasFeminineProductsBin  Boolean? // 여성 위생용품 수거함 유무
  hasChildUrinal          Boolean? // 어린이 소변기 유무
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  place                   Place    @relation(fields: [placeId], references: [id])
}

// 유저가 제보한 화장실 정보 
model UserSubmittedToiletInfo {
  id                      Int                        @id @default(autoincrement())
  placeId                 Int
  userId                  Int
  isUnisex                Boolean? // 남여공용 여부
  maleToiletCount         Int? // 남성용 좌변기 개수
  maleUrinalCount         Int? // 남성용 소변기 개수
  femaleToiletCount       Int? // 여성용 좌변기 개수
  hasHandDryer            Boolean? // 핸드 드라이어 유무
  hasPowderRoom           Boolean? // 파우더룸 유무
  hasBabyChangingFacility Boolean? // 기저귀 교환대 유무
  hasSanitizer            Boolean? // 손 소독제 유무
  indoor                  Boolean? // 실내 위치 여부
  accessible              Boolean? // 장애인 접근성 여부
  hasFeminineProductsBin  Boolean? // 여성 위생용품 수거함 유무
  hasChildUrinal          Boolean? // 어린이 소변기 유무
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  place                   Place                      @relation(fields: [placeId], references: [id])
  user                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  images                  UserSubmittedToiletImage[]
}

model UserSubmittedToiletImage {
  id                      Int                     @id @default(autoincrement())
  toiletInfoId            Int
  key                     String // 이미지 URL
  createdAt               DateTime                @default(now())
  userSubmittedToiletInfo UserSubmittedToiletInfo @relation(fields: [toiletInfoId], references: [id], onDelete: Cascade)
}

model PlaceReview {
  id                  Int             @id @default(autoincrement())
  placeId             Int
  userId              Int
  accessibilityRating Int // 접근성 
  facilityRating      Int // 시설 
  cleanlinessRating   Int // 청결도 
  visitTime           VisitTime? // 방문 시간대
  description         String? // 설명
  helpfulCount        Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  place               Place           @relation(fields: [placeId], references: [id])
  helpfulReviews      HelpfulReview[]
  images              ReviewImage[]

  @@unique([placeId, userId])
}

model ReviewImage {
  id        Int         @id @default(autoincrement())
  reviewId  Int
  key       String
  createdAt DateTime    @default(now())
  deletedAt DateTime?
  review    PlaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([id, reviewId])
}

model HelpfulReview {
  id          Int         @id @default(autoincrement())
  reviewId    Int
  userId      Int
  placeReview PlaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

// model Reports {
//   id                      Int            @id @default(autoincrement())
//   reportType             ReportType
//   reporterId             Int
//   targetUserId          Int?
//   targetToiletReviewId Int?
//   reason                  Reason
//   description             String?
//   reporter                Users          @relation("ReportedUser", fields: [reporterId], references: [id])
//   targetUser             Users?         @relation("TargetUser", fields: [targetUserId], references: [id])
//   targetToiletReview    ToiletReviews? @relation(fields: [targetToiletReviewId], references: [id])

//   @@unique([reporterId, targetUserId])
//   @@unique([reporterId, targetToiletReviewId])
// }
